"""
program: snake.py
author: Stanislav Birca, Kameron Bains
this python file acts as the interface
for the snake minigame for our
python minigame hub.
"""

# ! Warning: 50% of the comments to this code are generated by GitHub Copilot.
# ! Warning: line 115 is hardcoded, needs improvement, not truly centered
# ! Warning: this is the best implementation i could do for now, it is not perfect, but it works. Needs input disabled for a calculated amount of time after keypress, if the user spams keypresses, it causes game over screen and breaks the game.

def snake():
    #-------------------Libraries-------------------
    import pygame
    import random
    import os                                                   # OS used for centering the window (os.environ['SDL_VIDEO_CENTERED'] = '1')

    #-------------------Pygame and Window-------------------
    os.environ['SDL_VIDEO_CENTERED'] = '1'                      # Center the window using SDL environ, pygame uses SDL
    pygame.init()                                               # Initialize pygame
    pygame.font.init()                                          # Initialize the font (in pygame, the font is a separate from main init)
    pygame.mixer.init()                                         # Initialize the mixer for sound effects    
    pygame.display.set_caption('Snake')                         # Set the window title
    iconbitmap = pygame.image.load('Resources\iconbitmap.ico')  # Load the icon for the window
    pygame.display.set_icon(iconbitmap)                         # Set the icon for the window
    width, height = 720, 540                                    # Set window width and height
    blockSize = 20                                              # One snake block is 20px. Therefore, the width of the apple is 20 px by 20px. One pixel is 20px size block                        

    screen = pygame.display.set_mode((width, height))           # Set window width and height from width, height vars size
    rows = height // blockSize                                  # Choosing amount of rows based on height // blockSize, height must be divisible by blockSize!                   
    columns = width // blockSize                                # Choosing amount of columns based on height // blockSize, width must be divisible by blockSize!                   
    clock = pygame.time.Clock()                                 # Set up the clock which is used to control the frame rate of the game / the cycles of the game
    font = pygame.font.Font(None, 36)                           # Set up the font for the score

    #-------------------onSounds-------------------
    onEat = pygame.mixer.Sound('Resources\onEat.wav')           # Load the sound for the game, onEat is the sound when the snake eats the food
    onKey = pygame.mixer.Sound('Resources\onKey.wav')           # Load the sound for the game, onKey is the sound when a key is pressed
    onGameOver = pygame.mixer.Sound('Resources\gameOver.wav')   # Load the sound for the game, onGameOver is the sound when the game is over

    #-------------------Snake Game Vars -------------------
    snake = [(columns // 2, rows // 2)]                         # Sets the coordinates of the snake to the middle, based on columns and rows           
    direction = 'up'                                            # Set the direction of the snake to up, so it moves up initially                
    food = None                                                 # Set the food to none, so it is not on the screen initially                     
    score = 0                                                   # Set the score to 0, to be updated later                           

    while True:                                                 # Pygame must always run in a loop, so the game is always running                        
        for event in pygame.event.get():                        # This loop checks for events, such as key presses, mouse clicks, etc.
            if event.type == pygame.KEYDOWN:                    # This conditional statement checks if a key is pressed, if the direction is not the opposite of the current direction, which is illegal in rules of snake, then the direction is changed to the key pressed
                if event.key == pygame.K_UP and direction != 'down':
                    direction = 'up'
                    onKey.play()  
                elif event.key == pygame.K_DOWN and direction != 'up':
                    direction = 'down'
                    onKey.play()                                # Play the sound when a key is pressed (applies to all onKey.play() in while True loop)
                elif event.key == pygame.K_LEFT and direction != 'right':
                    direction = 'left'
                    onKey.play()  
                elif event.key == pygame.K_RIGHT and direction != 'left':
                    direction = 'right'
                    onKey.play()  

        #-------------------Snake logic-------------------
        head_x, head_y = snake[0]                                # Set the head of the snake to the position of the snake
        if direction == 'up':                                    # If the direction is up, snake moves up
            head_y -= 1                                          # Decrease the y coordinate of the head by 1, in 2D plane, this means moving one unit up. To fully understand, a knowledge of 2D is required. :D
        elif direction == 'down':
            head_y += 1
        elif direction == 'left':                                # If the direction is left, snake moves left
            head_x -= 1
        elif direction == 'right':
            head_x += 1
        snake.insert(0, (head_x, head_y))                        # Insert the new head of the snake to the front of the list, which means putting the head at the start

        #-------------------Game over conditions-------------------
        if (head_x < 0 or head_y < 0 or head_x >= columns or head_y >= rows or
                (head_x, head_y) in snake[1:]):                         
            break                                                # If the snake goes out of the screen or hits itself, the game is over

        #-------------------Food logic-------------------
        if food is None:                                         # If the food is none, then a new food is generated at a random pos       
            while True:                                          # While true, a new food is generated at a random pos
                food = (random.randint(0, columns - 1), random.randint(0, rows - 1))
                if food not in snake:
                    break
        elif food == snake[0]:                                   # If the food is at the head of the snake, (snake eats the food), then the score is increased by 1, and the food is set to none (disappears from the screen)
            score += 1
            onEat.play()                                         # Play the sound when the snake eats the food
            food = None
        else:
            snake.pop()                                          # Every cycle, the last element of the snake is removed IF food is not ate by snake

        #-------------------Drawing the elements-------------------
        screen.fill((199,246,199))                                                  # Very light green for background 
        for x, y in snake:                                                          # For every x and y in the snake, draw a green rectangle                      
            pygame.draw.rect(screen, (5, 110, 40), pygame.Rect(x * blockSize, y * blockSize, blockSize, blockSize))  # Draw a green rectangle at the x and y coordinates of the snake
        if food is not None:                                                        # If the food is not none, draw a red circle at the x and y coords
            pygame.draw.circle(screen, (248, 0, 0), (food[0] * blockSize + blockSize // 2, food[1] * blockSize + blockSize // 2), blockSize // 2) 
        score_text = font.render('Score: {}'.format(score), True, (0, 0, 0))        # After snake and food, render the score text
        screen.blit(score_text, (18, 18))                                           # Blit the score text to the screen at the x and y coordinates
        pygame.display.update()                                                     # Update the display with the new values         

        #------------------Increasing Difficulty-------------------
        if score > 5:
            clock.tick(12)      # If score is greater than 5, the framerate is at 11
        elif score > 10:
            clock.tick(14)      # If score is greater than 10, the framerate is at 14
        elif score > 15:
            clock.tick(25)      # If score is greater than 15, the framerate is at 25
        else:
            clock.tick(10)      # If score is less than 10, the framerate is at 10 ( default )


    #------------------Game Over / While True over-------------------
    screen.fill((0,0,0,0))                                                                          # Sets the screen to black (darksouls effect :D)
    score_text = font.render('YOU DIED! Your score was: {}'.format(score), True, (139, 0, 0))       # Tells user their score in red rgb text
    screen.blit(score_text, (20,20))                                                                # Blits the score text to the screen, NEEDS improvement, not truly centered               
    pygame.display.update()                                                                         # Updates the display with new values 
    onGameOver.play()                                                                               # Plays the game over sound      
    pygame.time.delay(5000)                                                                         # Delays the game over screen for 5 seconds          
    pygame.quit()                                                                                   # Quits the game after 5 sec so  